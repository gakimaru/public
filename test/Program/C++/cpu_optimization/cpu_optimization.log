----------------------------------------
[Optimize Test 01]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.095092200
  After1   ... *elapsed time=0.026024300
  After2   ... *elapsed time=0.026023800
  Appendix ... *elapsed time=0.194183900  *Appendix is most brief style with C++11
----------------------------------------
[Optimize Test 02]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.061059200
  After1   ... *elapsed time=0.059056200
  After2   ... *elapsed time=0.059056200
----------------------------------------
[Optimize Test 03]
Type1: *repeated * 100000000 times.
  Before   ... *elapsed time=0.176167500  sum=1974919424
  After    ... *elapsed time=0.056053000  sum=1974919424
Type2: *repeated * 100000000 times.
  Before   ... *elapsed time=0.402382800  sum=-525080576
  After    ... *elapsed time=0.058055300  sum=-525080576
Type3: *repeated * 10000 times.
  Before   ... *elapsed time=0.649616800  count=36760000
  After    ... *elapsed time=0.533508000  count=36760000
----------------------------------------
[Optimize Test 04]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.271256800
  After1   ... *elapsed time=0.153146800
  After2   ... *elapsed time=0.123116800
----------------------------------------
[Optimize Test 05]
Type1: *repeated * 10000000 times.
  Before   ... *elapsed time=0.216205900
  After    ... *elapsed time=0.207197000
----------------------------------------
[Optimize Test 06]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.192181600
  After    ... *elapsed time=0.058055600
----------------------------------------
[Optimize Test 07]
Type1: *repeated * 10000000 times.
  Before   ... *elapsed time=0.927883800
  After    ... *elapsed time=0.471446300
Type2: *repeated * 1000000 times.
  Before   ... *elapsed time=0.224214400
  After    ... *elapsed time=0.180171300
----------------------------------------
[Test for Lambda with closure]
for lambda1: external_counter=0
for lambda2: local_counter=0
for lambda3: static_counter=0
Call lambda in block with counter in setLambda().
lambda1()=1, lambda2()=1, lambda3()=1
lambda1()=2, lambda2()=2, lambda3()=2
lambda1()=3, lambda2()=3, lambda3()=3
dummy=999
Call lambda in block without counter in setLambda().
lambda1()=4, lambda2()=4, lambda3()=4
lambda1()=5, lambda2()=5, lambda3()=5
lambda1()=6, lambda2()=6, lambda3()=6
Call lambda in main().
lambda1()=7, lambda2()=NG!, lambda3()=7
lambda1()=8, lambda2()=NG!, lambda3()=8
lambda1()=9, lambda2()=NG!, lambda3()=9
