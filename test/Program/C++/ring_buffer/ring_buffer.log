--------------------------------------------------------------------------------
[Test for ring_buffer::container(Primitive type)]

[push_back * 10]
push_back(0) ... OK
push_back(1) ... OK
push_back(2) ... OK
push_back(3) ... OK
push_back(4) ... OK
push_back(5) ... OK
push_back(6) ... OK
push_back(7) ... OK
push_back(8) ... OK
push_back(9) ... OK
offset=0, size=10, max_size=20
array= 0 1 2 3 4 5 6 7 8 9

[pop_front * 5]
pop_front() ... OK [0]
pop_front() ... OK [1]
pop_front() ... OK [2]
pop_front() ... OK [3]
pop_front() ... OK [4]
offset=5, size=5, max_size=20
array= 5 6 7 8 9

[push_back * 20]
push_back(0) ... OK
push_back(1) ... OK
push_back(2) ... OK
push_back(3) ... OK
push_back(4) ... OK
push_back(5) ... OK
push_back(6) ... OK
push_back(7) ... OK
push_back(8) ... OK
push_back(9) ... OK
push_back(10) ... OK
push_back(11) ... OK
push_back(12) ... OK
push_back(13) ... OK
push_back(14) ... OK
push_back(15) ... NG!
push_back(16) ... NG!
push_back(17) ... NG!
push_back(18) ... NG!
push_back(19) ... NG!
offset=5, size=20, max_size=20
array= 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14

[pop_front * 25]
pop_front() ... OK [5]
pop_front() ... OK [6]
pop_front() ... OK [7]
pop_front() ... OK [8]
pop_front() ... OK [9]
pop_front() ... OK [0]
pop_front() ... OK [1]
pop_front() ... OK [2]
pop_front() ... OK [3]
pop_front() ... OK [4]
pop_front() ... OK [5]
pop_front() ... OK [6]
pop_front() ... OK [7]
pop_front() ... OK [8]
pop_front() ... OK [9]
pop_front() ... OK [10]
pop_front() ... OK [11]
pop_front() ... OK [12]
pop_front() ... OK [13]
pop_front() ... OK [14]
pop_front() ... NG!
pop_front() ... NG!
pop_front() ... NG!
pop_front() ... NG!
pop_front() ... NG!
offset=5, size=0, max_size=20
array=(empty)

[push_front * 10]
push_front(1000) ... OK
push_front(1001) ... OK
push_front(1002) ... OK
push_front(1003) ... OK
push_front(1004) ... OK
push_front(1005) ... OK
push_front(1006) ... OK
push_front(1007) ... OK
push_front(1008) ... OK
push_front(1009) ... OK
offset=15, size=10, max_size=20
array= 1009 1008 1007 1006 1005 1004 1003 1002 1001 1000

[pop_back * 5]
pop_back() ... OK [1000]
pop_back() ... OK [1001]
pop_back() ... OK [1002]
pop_back() ... OK [1003]
pop_back() ... OK [1004]
offset=15, size=5, max_size=20
array= 1009 1008 1007 1006 1005

[push_front * 20]
push_front(1000) ... OK
push_front(1001) ... OK
push_front(1002) ... OK
push_front(1003) ... OK
push_front(1004) ... OK
push_front(1005) ... OK
push_front(1006) ... OK
push_front(1007) ... OK
push_front(1008) ... OK
push_front(1009) ... OK
push_front(1010) ... OK
push_front(1011) ... OK
push_front(1012) ... OK
push_front(1013) ... OK
push_front(1014) ... OK
push_front(1015) ... NG!
push_front(1016) ... NG!
push_front(1017) ... NG!
push_front(1018) ... NG!
push_front(1019) ... NG!
offset=0, size=20, max_size=20
array= 1014 1013 1012 1011 1010 1009 1008 1007 1006 1005 1004 1003 1002 1001 1000 1009 1008 1007 1006 1005

[pop_back * 25]
pop_back() ... OK [1005]
pop_back() ... OK [1006]
pop_back() ... OK [1007]
pop_back() ... OK [1008]
pop_back() ... OK [1009]
pop_back() ... OK [1000]
pop_back() ... OK [1001]
pop_back() ... OK [1002]
pop_back() ... OK [1003]
pop_back() ... OK [1004]
pop_back() ... OK [1005]
pop_back() ... OK [1006]
pop_back() ... OK [1007]
pop_back() ... OK [1008]
pop_back() ... OK [1009]
pop_back() ... OK [1010]
pop_back() ... OK [1011]
pop_back() ... OK [1012]
pop_back() ... OK [1013]
pop_back() ... OK [1014]
pop_back() ... NG!
pop_back() ... NG!
pop_back() ... NG!
pop_back() ... NG!
pop_back() ... NG!
offset=0, size=0, max_size=20
array=(empty)

[push_back]
offset=10, size=9, max_size=20
array= 5 8 3 1 7 4 13 10 5
offset=10, size=9, max_size=20
array(reverse)= 5 10 13 4 7 1 3 8 5

[resize(expand)]
offset=10, size=12, max_size=20
array= 5 8 3 1 7 4 13 10 5 1000 1000 1000

[sort]
offset=10, size=12, max_size=20
array= 1 3 4 5 5 7 8 10 13 1000 1000 1000

[custom sort]
offset=10, size=12, max_size=20
array= 1000 1000 1000 13 10 8 7 5 5 4 3 1

[pop_back(1)]
back=1
offset=10, size=11, max_size=20
array= 1000 1000 1000 13 10 8 7 5 5 4 3

[pop_back(2)]
pop_back=[3]
offset=10, size=10, max_size=20
array= 1000 1000 1000 13 10 8 7 5 5 4

[find]
offset=10, size=10, max_size=20
array= 1000 1000 1000 13 10 8 7 5 5 4
find_value(5)=5 next=5
find_value(6)=(not found)
find_value(7)=7 next=5

[binary search(before sort)]
offset=10, size=10, max_size=20
array= 1000 1000 1000 13 10 8 7 5 5 4
binary_search_value(5)=(not found)
binary_search_value(6)=(not found)
binary_search_value(7)=(not found)

[binary search(after sort)]
offset=10, size=10, max_size=20
array= 4 5 5 7 8 10 13 1000 1000 1000
binary_search_value(5)=5 prev=4
binary_search_value(6)=(not found)
binary_search_value(7)=7 prev=5

[erase(1)]
offset=10, size=8, max_size=20
array= 4 5 5 7 8 10 1000 1000

[erase(2)]
offset=10, size=6, max_size=20
array= 4 5 5 7 1000 1000

[insert]
offset=10, size=11, max_size=20
array= 4 999 999 999 999 999 5 5 7 1000 1000

[resize(shrink)]
offset=10, size=5, max_size=20
array= 4 999 999 999 999

[assign]
offset=10, size=20, max_size=20
array= 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

[clear]
offset=0, size=0, max_size=20
array=(empty)
--------------------------------------------------------------------------------
[Test for ring_buffer::container(User defined type)]

[push_back * 10]
push_back(0:100) ... OK
push_back(1:101) ... OK
push_back(2:102) ... OK
push_back(3:103) ... OK
push_back(4:104) ... OK
push_back(5:105) ... OK
push_back(6:106) ... OK
push_back(7:107) ... OK
push_back(8:108) ... OK
push_back(9:109) ... OK
offset=0, size=10, max_size=20
array= [0:100] [1:101] [2:102] [3:103] [4:104] [5:105] [6:106] [7:107] [8:108] [9:109]

[pop_front * 5]
pop_front() ... OK [0:100]
pop_front() ... OK [1:101]
pop_front() ... OK [2:102]
pop_front() ... OK [3:103]
pop_front() ... OK [4:104]
offset=5, size=5, max_size=20
array= [5:105] [6:106] [7:107] [8:108] [9:109]

[push_back * 20]
push_back(0:100) ... OK
push_back(1:101) ... OK
push_back(2:102) ... OK
push_back(3:103) ... OK
push_back(4:104) ... OK
push_back(5:105) ... OK
push_back(6:106) ... OK
push_back(7:107) ... OK
push_back(8:108) ... OK
push_back(9:109) ... OK
push_back(10:110) ... OK
push_back(11:111) ... OK
push_back(12:112) ... OK
push_back(13:113) ... OK
push_back(14:114) ... OK
push_back(15:115) ... NG!
push_back(16:116) ... NG!
push_back(17:117) ... NG!
push_back(18:118) ... NG!
push_back(19:119) ... NG!
offset=5, size=20, max_size=20
array= [5:105] [6:106] [7:107] [8:108] [9:109] [0:100] [1:101] [2:102] [3:103] [4:104] [5:105] [6:106] [7:107] [8:108] [9:109] [10:110] [11:111] [12:112] [13:113] [14:114]

[pop_front * 25]
pop_front() ... OK [5:105]
pop_front() ... OK [6:106]
pop_front() ... OK [7:107]
pop_front() ... OK [8:108]
pop_front() ... OK [9:109]
pop_front() ... OK [0:100]
pop_front() ... OK [1:101]
pop_front() ... OK [2:102]
pop_front() ... OK [3:103]
pop_front() ... OK [4:104]
pop_front() ... OK [5:105]
pop_front() ... OK [6:106]
pop_front() ... OK [7:107]
pop_front() ... OK [8:108]
pop_front() ... OK [9:109]
pop_front() ... OK [10:110]
pop_front() ... OK [11:111]
pop_front() ... OK [12:112]
pop_front() ... OK [13:113]
pop_front() ... OK [14:114]
pop_front() ... NG!
pop_front() ... NG!
pop_front() ... NG!
pop_front() ... NG!
pop_front() ... NG!
offset=5, size=0, max_size=20
array=(empty)

[push_front * 10]
push_front(1000:100) ... OK
push_front(1001:101) ... OK
push_front(1002:102) ... OK
push_front(1003:103) ... OK
push_front(1004:104) ... OK
push_front(1005:105) ... OK
push_front(1006:106) ... OK
push_front(1007:107) ... OK
push_front(1008:108) ... OK
push_front(1009:109) ... OK
offset=15, size=10, max_size=20
array= [1009:109] [1008:108] [1007:107] [1006:106] [1005:105] [1004:104] [1003:103] [1002:102] [1001:101] [1000:100]

[pop_back * 5]
pop_back() ... OK [1000:100]
pop_back() ... OK [1001:101]
pop_back() ... OK [1002:102]
pop_back() ... OK [1003:103]
pop_back() ... OK [1004:104]
offset=15, size=5, max_size=20
array= [1009:109] [1008:108] [1007:107] [1006:106] [1005:105]

[push_front * 20]
push_front(1000:100) ... OK
push_front(1001:101) ... OK
push_front(1002:102) ... OK
push_front(1003:103) ... OK
push_front(1004:104) ... OK
push_front(1005:105) ... OK
push_front(1006:106) ... OK
push_front(1007:107) ... OK
push_front(1008:108) ... OK
push_front(1009:109) ... OK
push_front(1010:110) ... OK
push_front(1011:111) ... OK
push_front(1012:112) ... OK
push_front(1013:113) ... OK
push_front(1014:114) ... OK
push_front(1015:115) ... NG!
push_front(1016:116) ... NG!
push_front(1017:117) ... NG!
push_front(1018:118) ... NG!
push_front(1019:119) ... NG!
offset=0, size=20, max_size=20
array= [1014:114] [1013:113] [1012:112] [1011:111] [1010:110] [1009:109] [1008:108] [1007:107] [1006:106] [1005:105] [1004:104] [1003:103] [1002:102] [1001:101] [1000:100] [1009:109] [1008:108] [1007:107] [1006:106] [1005:105]

[pop_back * 25]
pop_back() ... OK [1005:105]
pop_back() ... OK [1006:106]
pop_back() ... OK [1007:107]
pop_back() ... OK [1008:108]
pop_back() ... OK [1009:109]
pop_back() ... OK [1000:100]
pop_back() ... OK [1001:101]
pop_back() ... OK [1002:102]
pop_back() ... OK [1003:103]
pop_back() ... OK [1004:104]
pop_back() ... OK [1005:105]
pop_back() ... OK [1006:106]
pop_back() ... OK [1007:107]
pop_back() ... OK [1008:108]
pop_back() ... OK [1009:109]
pop_back() ... OK [1010:110]
pop_back() ... OK [1011:111]
pop_back() ... OK [1012:112]
pop_back() ... OK [1013:113]
pop_back() ... OK [1014:114]
pop_back() ... NG!
pop_back() ... NG!
pop_back() ... NG!
pop_back() ... NG!
pop_back() ... NG!
offset=0, size=0, max_size=20
array=(empty)

[push_back(1)]
offset=10, size=3, max_size=20
array= [5:101] [8:102] [3:103]
offset=10, size=3, max_size=20
array(reverse)= [3:103] [8:102] [5:101]

[push_back(2)]
offset=10, size=9, max_size=20
array= [5:101] [8:102] [3:103] [1:104] [7:105] [4:106] [13:107] [10:108] [5:109]

[resize(1)]
offset=10, size=12, max_size=20
array= [5:101] [8:102] [3:103] [1:104] [7:105] [4:106] [13:107] [10:108] [5:109] [1000:1000] [1000:1000] [1000:1000]

[resize(2)]
offset=10, size=15, max_size=20
array= [5:101] [8:102] [3:103] [1:104] [7:105] [4:106] [13:107] [10:108] [5:109] [1000:1000] [1000:1000] [1000:1000] [1001:1001] [1001:1001] [1001:1001]

[sort]
offset=10, size=15, max_size=20
array= [1:104] [3:103] [4:106] [5:101] [5:109] [7:105] [8:102] [10:108] [13:107] [1000:1000] [1000:1000] [1000:1000] [1001:1001] [1001:1001] [1001:1001]

[custom sort]
offset=10, size=15, max_size=20
array= [1001:1001] [1001:1001] [1001:1001] [1000:1000] [1000:1000] [1000:1000] [13:107] [10:108] [8:102] [7:105] [5:109] [5:101] [4:106] [3:103] [1:104]

[pop_back(1)]
back=[1:104]
offset=10, size=14, max_size=20
array= [1001:1001] [1001:1001] [1001:1001] [1000:1000] [1000:1000] [1000:1000] [13:107] [10:108] [8:102] [7:105] [5:109] [5:101] [4:106] [3:103]

[pop_back(2)]
pop_back:val=[3:103]
offset=10, size=13, max_size=20
array= [1001:1001] [1001:1001] [1001:1001] [1000:1000] [1000:1000] [1000:1000] [13:107] [10:108] [8:102] [7:105] [5:109] [5:101] [4:106]

[find]
offset=10, size=13, max_size=20
array= [1001:1001] [1001:1001] [1001:1001] [1000:1000] [1000:1000] [1000:1000] [13:107] [10:108] [8:102] [7:105] [5:109] [5:101] [4:106]
find_value(key=5)= [5:109] next=[5:101]
find_value(key=6)=(not found)
find_value(key=7)= [7:105] next=[5:109]

[binary search(before sort)]
offset=10, size=13, max_size=20
array= [1001:1001] [1001:1001] [1001:1001] [1000:1000] [1000:1000] [1000:1000] [13:107] [10:108] [8:102] [7:105] [5:109] [5:101] [4:106]
binary_search_value(key=5)=(not found)
binary_search_value(key=6)=(not found)
binary_search_value(key=7)=(not found)

[binary search(after sort)]
offset=10, size=13, max_size=20
array= [4:106] [5:101] [5:109] [7:105] [8:102] [10:108] [13:107] [1000:1000] [1000:1000] [1000:1000] [1001:1001] [1001:1001] [1001:1001]
binary_search_value(key=5)= [5:101] prev=[4:106]
binary_search_value(key=6)=(not found)
binary_search_value(key=7)= [7:105] prev=[5:109]

[erase(1)]
offset=10, size=11, max_size=20
array= [4:106] [5:101] [5:109] [7:105] [8:102] [10:108] [13:107] [1000:1000] [1000:1000] [1001:1001] [1001:1001]

[erase(2)]
offset=10, size=9, max_size=20
array= [4:106] [5:101] [5:109] [7:105] [8:102] [10:108] [13:107] [1001:1001] [1001:1001]

[insert(1)]
offset=10, size=14, max_size=20
array= [4:106] [99:999] [99:999] [99:999] [99:999] [99:999] [5:101] [5:109] [7:105] [8:102] [10:108] [13:107] [1001:1001] [1001:1001]

[insert(2)]
offset=10, size=16, max_size=20
array= [4:106] [99:999] [99:999] [99:999] [99:999] [99:999] [5:101] [5:109] [7:105] [8:102] [88:888] [88:888] [10:108] [13:107] [1:104] [0:0]

[resize(shrink)]
offset=10, size=5, max_size=20
array= [4:106] [99:999] [99:999] [99:999] [99:999]

[assign(1)]
offset=10, size=5, max_size=20
array= [0:0] [0:0] [99:999] [99:999] [99:999]

[assign(2)]
offset=10, size=20, max_size=20
array= [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0] [-1:0]

[clear]
offset=0, size=0, max_size=20
array=(empty)
--------------------------------------------------------------------------------
[Test for ring_buffer::container(User defined type with custom operator type)]

[push_back]
offset=10, size=10, max_size=20
array= [1:105] [1:108] [2:103] [2:101] [3:107] [3:104] [4:113] [4:111] [5:105] [5:106]

[sort]
offset=10, size=10, max_size=20
array= [2:101] [2:103] [3:104] [5:105] [1:105] [5:106] [3:107] [1:108] [4:111] [4:113]

[find]
find_value(value=101)= [2:101]
find_value(value=110)=(not found)
find_value(value=103)= [2:103]

[binary search]
binary_search_value(value=101)= [2:101]
binary_search_value(value=110)=(not found)
binary_search_value(value=103)= [2:103]

[sort with custom predicate]
offset=10, size=10, max_size=20
array= [1:108] [1:105] [2:103] [2:101] [3:107] [3:104] [4:113] [4:111] [5:106] [5:105]

[find with custom predicate(1)]
find(key=2, value=101)= [2:101]
find(key=2, value=102)=(not found)
find(key=2, value=103)= [2:103]

[binary search with custom comparison(1)]
binary_search_value(key=2, value=101)= [2:101]
binary_search_value(key=2, value=102)=(not found)
binary_search_value(key=2, value=103)= [2:103]

[find with custom predicate(2)]
find(key=2)= [2:103]
find(key=7)=(not found)
find(key=3)= [3:107]

[binary search with custom comparison(2)]
binary_search_value(key=2)= [2:103]
binary_search_value(key=7)=(not found)
binary_search_value(key=3)= [3:107]
--------------------------------------------------------------------------------
[Test for ring_buffer::container(User defined type for existing data)]

[sort(before)]
offset=0, size=12, max_size=12
array= [6:111] [2:103] [2:104] [4:107] [3:105] [3:106] [1:102] [5:109] [1:101] [4:108] [5:110] [6:112]

[sort(after)]
offset=0, size=12, max_size=12
array= [1:102] [1:101] [2:103] [2:104] [3:105] [3:106] [4:107] [4:108] [5:109] [5:110] [6:111] [6:112]
--------------------------------------------------------------------------------
[Test for ring_buffer::container(User defined type for multi-thread)]

[normal container]
(before)
offset=0, size=0, max_size=100
array= [0:0] [1:1] [3:3] [2:2] [4:4] [5:5] [6:6] [8:8] [9:9] [7:7]
(after)
offset=0, size=10, max_size=100
array= [1:1] [4:4] [5:5] [7:7] [5:15] [3:13] [7:17] [4:14] [8:18] [2:12]

[multi-thread container]
(before)
offset=0, size=0, max_size=100
array=(empty)
(after)
offset=0, size=10, max_size=100
array= [0:10] [2:12] [3:13] [5:15] [9:19] [4:14] [7:17] [6:16] [1:11] [8:18]
--------------------------------------------------------------------------------
[Test for performance ring_buffer]

[create container & assign() * 10]
*elapsed_time=0.000000000 sec

[clear() * 10]
*elapsed_time=0.000000000 sec

[push_back() * 10]
num=10
*elapsed_time=0.000000000 sec

[iterator(1)]
offset=5, size=10, max_size=10
array= [0:10000000] [1:10000001] [2:10000002] [3:10000003] [4:10000004] [5:10000005] [6:10000006] [7:10000007] [8:10000008] [9:10000009]
num=10
*elapsed_time=0.000000000 sec

[reverse sort]
*elapsed_time=0.000000000 sec

[iterator(2)]
offset=5, size=10, max_size=10
array= [9:10000009] [8:10000008] [7:10000007] [6:10000006] [5:10000005] [4:10000004] [3:10000003] [2:10000002] [1:10000001] [0:10000000]
num=10
*elapsed_time=0.000000000 sec

[sort]
*elapsed_time=0.000000000 sec

[reverse_iterator]
offset=5, size=10, max_size=10
array= [9:10000009] [8:10000008] [7:10000007] [6:10000006] [5:10000005] [4:10000004] [3:10000003] [2:10000002] [1:10000001] [0:10000000]
num=10
*elapsed_time=0.000000000 sec

[find_value]
 [0:10000000] [1:10000001] [2:10000002] [3:10000003] [4:10000004] [5:10000005] [6:10000006] [7:10000007] [8:10000008] [9:10000009]
num=10
*elapsed_time=0.000000000 sec

[binary_search_value]
 [0:10000000] [1:10000001] [2:10000002] [3:10000003] [4:10000004] [5:10000005] [6:10000006] [7:10000007] [8:10000008] [9:10000009]
num=10
*elapsed_time=0.000000000 sec

[delete container]
*elapsed_time=0.000000000 sec

[finish]
*elapsed_time=0.000000000 sec
--------------------------------------------------------------------------------
[Test for performance std::deque]

[create container & assign() * 10]
*elapsed_time=0.000000000 sec

[clear() * 10]
*elapsed_time=0.000000000 sec

[push_back() * 10]
num=10
*elapsed_time=0.000000000 sec

[iterator(1)]
size=10, max_size=536870911
array= [0:10000000] [1:10000001] [2:10000002] [3:10000003] [4:10000004] [5:10000005] [6:10000006] [7:10000007] [8:10000008] [9:10000009]
num=10
*elapsed_time=0.000000000 sec

[reverse sort]
*elapsed_time=0.000000000 sec

[iterator(2)]
size=10, max_size=536870911
array= [9:10000009] [8:10000008] [7:10000007] [6:10000006] [5:10000005] [4:10000004] [3:10000003] [2:10000002] [1:10000001] [0:10000000]
num=10
*elapsed_time=0.000000000 sec

[sort]
*elapsed_time=0.000000000 sec

[reverse_iterator]
size=10, max_size=536870911
array= [9:10000009] [8:10000008] [7:10000007] [6:10000006] [5:10000005] [4:10000004] [3:10000003] [2:10000002] [1:10000001] [0:10000000]
num=10
*elapsed_time=0.000000000 sec

[find_value]
 [0:10000000] [1:10000001] [2:10000002] [3:10000003] [4:10000004] [5:10000005] [6:10000006] [7:10000007] [8:10000008] [9:10000009]
num=10
*elapsed_time=0.000000000 sec

[binary_search_value]
 [0:10000000] [1:10000001] [2:10000002] [3:10000003] [4:10000004] [5:10000005] [6:10000006] [7:10000007] [8:10000008] [9:10000009]
num=10
*elapsed_time=0.000000000 sec

[delete container]
*elapsed_time=0.000000000 sec

[finish]
*elapsed_time=0.000000000 sec

- end -
