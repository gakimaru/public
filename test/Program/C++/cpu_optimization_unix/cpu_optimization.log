----------------------------------------
[Optimize Test 01]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.012514000
  After1   ... *elapsed time=0.012064000
  After2   ... *elapsed time=0.013375000
  Appendix ... *elapsed time=0.054080000  *Appendix is most brief style with C++11
----------------------------------------
[Optimize Test 02]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.060047000
  After1   ... *elapsed time=0.057906000
  After2   ... *elapsed time=0.058263000
----------------------------------------
[Optimize Test 03]
Type1: *repeated * 100000000 times.
  Before   ... *elapsed time=0.163931000  sum=-1390256896
  After    ... *elapsed time=0.020307000  sum=-1390256896
Type2: *repeated * 100000000 times.
  Before   ... *elapsed time=0.329255000  sum=589612288
  After    ... *elapsed time=0.025028000  sum=589612288
Type3: *repeated * 10000 times.
  Before   ... *elapsed time=0.525977000  count=35860000
  After    ... *elapsed time=0.313268000  count=35860000
----------------------------------------
[Optimize Test 04]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.551428000
  After1   ... *elapsed time=0.169305000
  After2   ... *elapsed time=0.075797000
----------------------------------------
[Optimize Test 05]
Type1: *repeated * 10000000 times.
  Before   ... *elapsed time=0.197456000
  After    ... *elapsed time=0.183166000
----------------------------------------
[Optimize Test 06]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.497894000
  After    ... *elapsed time=0.054117000
----------------------------------------
[Optimize Test 07]
Type1: *repeated * 10000000 times.
  Before   ... *elapsed time=0.808720000
  After    ... *elapsed time=0.429331000
Type2: *repeated * 1000000 times.
  Before   ... *elapsed time=0.112110000
  After    ... *elapsed time=0.077442000
----------------------------------------
[Test for Lambda with closure]
for lambda1: external_counter=0
for lambda2: local_counter=0
for lambda3: static_counter=0
Call lambda in block with counter in setLambda().
lambda1()=1, lambda2()=1, lambda3()=1
lambda1()=2, lambda2()=2, lambda3()=2
lambda1()=3, lambda2()=3, lambda3()=3
dummy=999
Call lambda in block without counter in setLambda().
lambda1()=4, lambda2()=4, lambda3()=4
lambda1()=5, lambda2()=5, lambda3()=5
lambda1()=6, lambda2()=6, lambda3()=6
Call lambda in main().
lambda1()=7, lambda2()=NG!, lambda3()=7
lambda1()=8, lambda2()=NG!, lambda3()=8
lambda1()=9, lambda2()=NG!, lambda3()=9
