≪仕様・設計書≫

[仕様・設計書]
 |
 |- ゲームシステムのアーキテクチャと開発環境
 |
 |-[AI]
 |  |
 |  `- プランナーのためのAIシステム考察
 |
 |-[アセット管理]
 |  |
 |  `- 効果的なランタイムアセット管理
 |
 |-[イベントシステム]
 |  |
 |  `- 【削除予定】【未】効果的なイベントストリーミングシステム
 |
 |-[カメラシステム]
 |  |
 |  `- カメラ処理の効率化手法
 |
 |-[ゲームデータ管理]
 |  |
 |  |- ゲームデータ仕様
 |  |- ゲームデータ管理DBシステム
 |  `- ローカライズのためのテキスト管理構造
 |
 |-[ゲームループ管理]
 |  |
 |  `- マルチスレッドによるゲームループ管理
 |
 |-[サウンドシステム]
 |  |
 |  `- リソース管理を最適化するためのサウンドシステム
 |
 |-[シーン管理]
 |  |
 |  `- ゲーム全体を円滑に制御するためのシーン管理
 |
 |-[シリアライズ]
 |  |
 |  `- 【未】セーブデータのためのシリアライズ処理
 |
 |-[スクリプト管理]
 |  |
 |  `- スクリプトの生産性向上のための名前付きデータ参照
 |
 |-[デバイス管理]
 |  |
 |  `- 反応性と安全性を考慮した入力デバイス管理
 |
 |-[デバッグシステム]
 |  |
 |  |- デバッグ制御システム
 |  |- ユニットテストと継続的ビルド
 |  `- 効果的なデバッグログとアサーション
 |
 |-[ファイルシステム]
 |  |
 |  `- 開発を効率化するためのファイルシステム
 |
 |-[プログラミングTips]
 |  |
 |  |- オブジェクト指向とC++
 |  |- チーム開発のためのコーディング手法
 |  |- デザインパターンの活用
 |  |- プレイヤーに不満を感じさせないための乱数制御
 |  |- プログラミング禁則事項
 |  |- 効果的なテンプレートテクニック
 |  `- 本当にちょっとしたプログラミングTips
 |
 |-[プロジェクト管理]
 |  |
 |  |- 【未】ゲーム開発のためのプロジェクト管理
 |  |- 【未】プロジェクト管理Webシステム
 |  `- 【未】技術ナレッジDBシステム
 |
 |-[マルチスレッド制御]
 |  |
 |  |- 「サービス」によるマルチスレッドの効率化
 |  |- マルチスレッドプログラミングの基礎
 |  `- 効率化と安全性のためのロック制御
 |
 |-[メモリ管理]
 |  |
 |  |- 【削除予定】【未】ゲーム制御のためのメモリ管理方針
 |  |- 【未】ヒープメモリとスラブアロケータを併用したメモリ管理
 |  `- 【削除予定】【未】様々なメモリ管理手法と共通アロケータインターフェース
 |
 |-[リソース管理]
 |  |
 |  `- 開発の効率化と安全性のためのリソース管理
 |
 |-[レベル管理]
 |  |
 |  `- オープンワールドのためのレベル管理
 |
 `-[開発環境]
    |
    `- 【未】複数タイトルにまたがる効率的なフレームワーク管理

以上
