----------------------------------------
[Optimize Test 01]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.012173000
  After1   ... *elapsed time=0.012147000
  After2   ... *elapsed time=0.013367000
  Appendix ... *elapsed time=0.054519000  *Appendix is most brief style with C++11
----------------------------------------
[Optimize Test 02]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.057589000
  After1   ... *elapsed time=0.057430000
  After2   ... *elapsed time=0.057668000
----------------------------------------
[Optimize Test 03]
Type1: *repeated * 100000000 times.
  Before   ... *elapsed time=0.164038000  sum=-1390256896
  After    ... *elapsed time=0.020096000  sum=-1390256896
Type2: *repeated * 100000000 times.
  Before   ... *elapsed time=0.340512000  sum=589612288
  After    ... *elapsed time=0.024996000  sum=589612288
Type3: *repeated * 10000 times.
  Before   ... *elapsed time=0.461703000  count=35860000
  After    ... *elapsed time=0.312916000  count=35860000
----------------------------------------
[Optimize Test 04]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.541523000
  After1   ... *elapsed time=0.169103000
  After2   ... *elapsed time=0.075490000
----------------------------------------
[Optimize Test 05]
Type1: *repeated * 10000000 times.
  Before   ... *elapsed time=0.200088000
  After    ... *elapsed time=0.185980000
----------------------------------------
[Optimize Test 06]
Type1: *repeated * 10000 times.
  Before   ... *elapsed time=0.494990000
  After    ... *elapsed time=0.054563000
----------------------------------------
[Optimize Test 07]
Type1: *repeated * 10000000 times.
  Before   ... *elapsed time=0.745927000
  After    ... *elapsed time=0.349274000
Type2(strlen): *repeated * 1000000 times.
  Before   ... *elapsed time=0.074360000
  After    ... *elapsed time=0.022693000
Type2(strcmp): *repeated * 1000000 times.
  Before   ... *elapsed time=0.186249000
  After    ... *elapsed time=0.099955000
Type2(strncmp): *repeated * 1000000 times.
  Before   ... *elapsed time=0.717252000
  After    ... *elapsed time=0.374608000
Type2(strchr): *repeated * 1000000 times.
  Before   ... *elapsed time=0.172881000
  After    ... *elapsed time=0.073881000
Type2(strrchr): *repeated * 1000000 times.
  Before   ... *elapsed time=0.462674000
  After    ... *elapsed time=0.133942000
Type2(strstr): *repeated * 1000000 times.
  Before   ... *elapsed time=7.375736000
  After    ... *elapsed time=0.784991000
Type2(strcpy): *repeated * 1000000 times.
  Before   ... *elapsed time=0.073304000
  After    ... *elapsed time=0.041956000
Type2(strncpy): *repeated * 1000000 times.
  Before   ... *elapsed time=0.250041000
  After    ... *elapsed time=0.145560000
----------------------------------------
[Test for Lambda with closure]
for lambda1: external_counter=0
for lambda2: local_counter=0
for lambda3: static_counter=0
Call lambda in block with counter in setLambda().
lambda1()=1, lambda2()=1, lambda3()=1
lambda1()=2, lambda2()=2, lambda3()=2
lambda1()=3, lambda2()=3, lambda3()=3
dummy=999
Call lambda in block without counter in setLambda().
lambda1()=4, lambda2()=4, lambda3()=4
lambda1()=5, lambda2()=5, lambda3()=5
lambda1()=6, lambda2()=6, lambda3()=6
Call lambda in main().
lambda1()=7, lambda2()=NG!, lambda3()=7
lambda1()=8, lambda2()=NG!, lambda3()=8
lambda1()=9, lambda2()=NG!, lambda3()=9
